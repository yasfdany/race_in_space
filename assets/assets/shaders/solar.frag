{
  "sksl": {
    "entrypoint": "solar_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec2 iResolution;\nuniform float iTime;\nuniform float pixels;\nuniform vec4 darkColor;\nuniform vec4 midColor;\nuniform vec4 lightColor;\nuniform vec4 lightestColor;\n\nvec4 fragColor;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nvec2 FLT_flutter_local_hash22(vec2 p)\n{\n    vec3 p3 = fract(vec3(p.xyx) * 0.103100001811981201171875);\n    p3 += vec3(dot(p3, p3.yzx + vec3(33.3300018310546875)));\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nfloat FLT_flutter_local_cellular(inout vec2 p, float numCells)\n{\n    p *= numCells;\n    vec2 ip = floor(p);\n    vec2 fp = fract(p);\n    float d = 1.0;\n    for (int y = -1; y <= 1; y++)\n    {\n        for (int x = -1; x <= 1; x++)\n        {\n            vec2 neighbor = vec2(float(x), float(y));\n            vec2 param = mod(ip + neighbor, vec2(numCells));\n            vec2 point = FLT_flutter_local_hash22(param);\n            point = vec2(0.5) + (sin(vec2(iTime) + (point * 6.283100128173828125)) * 0.5);\n            vec2 diff = (neighbor + point) - fp;\n            d = min(d, dot(diff, diff));\n        }\n    }\n    return sqrt(d);\n}\n\nvoid FLT_main()\n{\n    vec2 uv = FLT_flutter_local_FlutterFragCoord() / vec2(iResolution.y);\n    uv.x *= (iResolution.x / iResolution.y);\n    vec2 pixelized = floor(uv * pixels) / vec2(pixels);\n    float dist = distance(pixelized, vec2(0.5));\n    float a = step(dist, 0.5);\n    if (a > 0.0)\n    {\n        vec2 param_1 = pixelized - vec2(iTime * 0.100000001490116119384765625, 0.0);\n        float param_2 = 10.0;\n        float _194 = FLT_flutter_local_cellular(param_1, param_2);\n        float n = _194;\n        vec2 param_3 = pixelized - vec2(iTime * 0.0500000007450580596923828125, 0.0);\n        float param_4 = 20.0;\n        float _204 = FLT_flutter_local_cellular(param_3, param_4);\n        n *= _204;\n        n = clamp(n * 2.0, 0.0, 1.0);\n        vec4 col = mix(mix(darkColor, midColor, vec4(n * 2.0)), mix(lightColor, lightestColor, vec4((n - 0.5) * 2.0)), vec4(step(0.5, n)));\n        fragColor = vec4(col.xyz, col.w);\n    }\n    else\n    {\n        fragColor = vec4(0.0);\n    }\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 0,
        "name": "iResolution",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "iTime",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "pixels",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 3,
        "name": "darkColor",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 4,
        "name": "midColor",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 5,
        "name": "lightColor",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 6,
        "name": "lightestColor",
        "rows": 4,
        "type": 10
      }
    ]
  }
}