{
  "sksl": {
    "entrypoint": "dry_planet_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec2 iResolution;\nuniform float iTime;\nuniform float seed;\nuniform float size;\nuniform float pixels;\nuniform vec4 lighterColor;\nuniform vec4 lightColor;\nuniform vec4 midColor;\nuniform vec4 darkColor;\nuniform vec4 darkerColor;\n\nvec4 fragColor;\n\nfloat rotation;\nvec2 light_origin;\nfloat light_dist1;\nfloat light_dist2;\nfloat time_speed;\nfloat dither_size;\nbool should_dither;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nvec2 FLT_flutter_local_spherify(vec2 uv)\n{\n    vec2 centered = (uv * 2.0) - vec2(1.0);\n    float z = sqrt(1.0 - dot(centered, centered));\n    vec2 sphere = centered / vec2(z + 1.0);\n    return (sphere * 0.5) + vec2(0.5);\n}\n\nvec2 FLT_flutter_local_rotate(inout vec2 coord, float angle)\n{\n    coord -= vec2(0.5);\n    coord *= mat2(vec2(vec2(cos(angle), -sin(angle))), vec2(vec2(sin(angle), cos(angle))));\n    return coord + vec2(0.5);\n}\n\nfloat FLT_flutter_local_rand(inout vec2 coord)\n{\n    coord = mod(coord, vec2(2.0, 1.0) * floor(size + float(0.5)));\n    return fract((sin(dot(coord, vec2(12.98980045318603515625, 78.233001708984375))) * 43758.546875) * seed);\n}\n\nfloat FLT_flutter_local_noise(vec2 coord)\n{\n    vec2 i = floor(coord);\n    vec2 f = fract(coord);\n    vec2 param = i;\n    float _98 = FLT_flutter_local_rand(param);\n    float a = _98;\n    vec2 param_1 = i + vec2(1.0, 0.0);\n    float _104 = FLT_flutter_local_rand(param_1);\n    float b = _104;\n    vec2 param_2 = i + vec2(0.0, 1.0);\n    float _110 = FLT_flutter_local_rand(param_2);\n    float c = _110;\n    vec2 param_3 = i + vec2(1.0);\n    float _116 = FLT_flutter_local_rand(param_3);\n    float d = _116;\n    vec2 cubic = (f * f) * (vec2(3.0) - (f * 2.0));\n    return (mix(a, b, cubic.x) + (((c - a) * cubic.y) * (1.0 - cubic.x))) + (((d - b) * cubic.x) * cubic.y);\n}\n\nfloat FLT_flutter_local_fbm(inout vec2 coord)\n{\n    float value = 0.0;\n    float scale = 0.5;\n    for (int i = 0; i < 3; i++)\n    {\n        vec2 param = coord;\n        value += (FLT_flutter_local_noise(param) * scale);\n        coord *= 2.0;\n        scale *= 0.5;\n    }\n    return value;\n}\n\nbool FLT_flutter_local_dither(vec2 uv1, vec2 uv2)\n{\n    return mod(uv1.x + uv2.y, 2.0 / pixels) <= (1.0 / pixels);\n}\n\nvoid FLT_main()\n{\n    rotation = 0.0;\n    light_origin = vec2(0.4000000059604644775390625, 0.60000002384185791015625);\n    light_dist1 = 0.361999988555908203125;\n    light_dist2 = 0.52499997615814208984375;\n    time_speed = 0.100000001490116119384765625;\n    dither_size = 2.0;\n    should_dither = true;\n    vec4 colors[5];\n    colors[0] = lighterColor;\n    colors[1] = lightColor;\n    colors[2] = midColor;\n    colors[3] = darkColor;\n    colors[4] = darkerColor;\n    vec2 uv = FLT_flutter_local_FlutterFragCoord() / iResolution;\n    uv.x *= (iResolution.x / iResolution.y);\n    uv = floor(uv * pixels) / vec2(pixels);\n    uv.y = 1.0 - uv.y;\n    float d_circle = distance(uv, vec2(0.5));\n    float circle_alpha = smoothstep(0.5, 0.49500000476837158203125, d_circle);\n    if (circle_alpha <= 0.0)\n    {\n        fragColor = vec4(0.0);\n        return;\n    }\n    vec2 param = uv;\n    uv = FLT_flutter_local_spherify(param);\n    vec2 param_1 = uv;\n    float param_2 = rotation;\n    vec2 _328 = FLT_flutter_local_rotate(param_1, param_2);\n    uv = _328;\n    float d_light = smoothstep(-0.300000011920928955078125, 1.2000000476837158203125, distance(uv, light_origin));\n    if (d_light < light_dist1)\n    {\n        d_light *= 0.89999997615814208984375;\n    }\n    if (d_light < light_dist2)\n    {\n        d_light *= 0.89999997615814208984375;\n    }\n    vec2 param_3 = (uv * size) + vec2(iTime * time_speed, 0.0);\n    float _362 = FLT_flutter_local_fbm(param_3);\n    float f = _362;\n    float c = (d_light * pow(f, 0.800000011920928955078125)) * 3.5;\n    bool _381;\n    if (should_dither)\n    {\n        vec2 param_4 = uv;\n        vec2 param_5 = FLT_flutter_local_FlutterFragCoord() / iResolution;\n        _381 = FLT_flutter_local_dither(param_4, param_5);\n    }\n    else\n    {\n        _381 = should_dither;\n    }\n    if (_381)\n    {\n        c += 0.0199999995529651641845703125;\n        c *= 1.0499999523162841796875;\n    }\n    float posterized = floor(c * 4.0) / 4.0;\n    int idx = int(clamp(posterized, 0.0, 0.99989998340606689453125) * 4.0);\n    vec4 col;\n    if (idx == 0)\n    {\n        col = colors[0];\n    }\n    else\n    {\n        if (idx == 1)\n        {\n            col = colors[1];\n        }\n        else\n        {\n            if (idx == 2)\n            {\n                col = colors[2];\n            }\n            else\n            {\n                if (idx == 3)\n                {\n                    col = colors[3];\n                }\n                else\n                {\n                    col = colors[4];\n                }\n            }\n        }\n    }\n    fragColor = vec4(col.xyz, circle_alpha);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 0,
        "name": "iResolution",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "iTime",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "seed",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 3,
        "name": "size",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 4,
        "name": "pixels",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 5,
        "name": "lighterColor",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 6,
        "name": "lightColor",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 7,
        "name": "midColor",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 8,
        "name": "darkColor",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 9,
        "name": "darkerColor",
        "rows": 4,
        "type": 10
      }
    ]
  }
}